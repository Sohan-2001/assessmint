
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  role      Role
  exams     Exam[]   @relation("SetterExams")
  submissions UserSubmission[] @relation("TakerSubmissions")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  SETTER
  TAKER
}

model Exam {
  id        String   @id @default(cuid())
  title     String
  description String?
  passcode  String
  setter    User     @relation("SetterExams", fields: [setterId], references: [id])
  setterId  String
  questions Question[]
  submissions UserSubmission[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  durationMinutes Int?
  openAt    DateTime? // New field for scheduled opening time
}

model Question {
  id        String   @id @default(cuid())
  text      String
  type      QuestionType
  exam      Exam     @relation(fields: [examId], references: [id])
  examId    String
  options   QuestionOption[]
  correctAnswer String?
  points    Int
  answers   UserAnswer[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum QuestionType {
  MULTIPLE_CHOICE
  SHORT_ANSWER
  ESSAY
}

model QuestionOption {
  id        String   @id @default(cuid())
  text      String
  question  Question @relation(fields: [questionId], references: [id])
  questionId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserSubmission {
  id          String    @id @default(cuid())
  exam        Exam      @relation(fields: [examId], references: [id])
  examId      String
  taker       User      @relation("TakerSubmissions", fields: [takerId], references: [id])
  takerId     String
  answers     UserAnswer[]
  submittedAt DateTime  @default(now())
  score       Float? // Optional: if you implement auto-grading or manual grading
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserAnswer {
  id           String      @id @default(cuid())
  submission   UserSubmission @relation(fields: [submissionId], references: [id])
  submissionId String
  question     Question    @relation(fields: [questionId], references: [id])
  questionId   String
  answer       Json // Store answer as string for text/essay, option ID for MCQ
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
